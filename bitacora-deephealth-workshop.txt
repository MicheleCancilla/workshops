#
# BITACORA TO INSTALL:
#           - Basic packages
#           - Anaconda3
#           - EDDL
#           - OpenCV
#           - ECVL
#           - pipeline
#

# Installing basic packages

apt update
apt upgrade
apt install p7zip-full make gcc-8 g++-8 libz-dev

# add these two lines in ${HOME}/.bashrc

export CC=/usr/bin/gcc-8
export CXX=/usr/bin/g++-8

# and do

. ~/.bashrc


# Installing Anaconda

wget https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh
bash Anaconda3-2020.02-Linux-x86_64.sh
. ~/.bashrc
conda upgrade --all


# Installing EDDL according to https://deephealthproject.github.io/eddl/installation/installation.html "From source with cmake"
# but with a little change for using a previous release due to possible incompatibilities with ECVL. This will be no necessary in the future.
# git checkout  faf7316a08b5cb4d56e15ab1ae784f1e55c9f391

# Downloading source code

git clone https://github.com/deephealthproject/eddl.git
cd eddl/
git checkout  faf7316a08b5cb4d56e15ab1ae784f1e55c9f391

# Installing dependencies

conda env create -f environment.yml

# If eddl environment already exists, then update it with the following command by using the same YAML file
# conda env update --prefix ./env --file environment.yml  --prune

conda activate eddl

# Optionally you can add this line at the end of ~/.bashrc file to activate the eddl environment when login into this virtual machine
#echo "conda activate eddl" >>${HOME}/.bashrc

# Building and installing

mkdir build
cd build

#cmake .. # better to provide CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX
cmake -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DBUILD_TESTS=OFF ..
make -j$(nproc)
make install

# Update this environment library, it will be needed to find EDDL library and other ones like Protobuf
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/root/anaconda3/envs/eddl/lib"

# Optionally: add this line at the end of ~/.bashrc file
#echo 'export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/root/anaconda3/envs/eddl/lib"' >>${HOME}/.bashrc

apt install libz-dev # needed to compile not during cmake execution -- maybe this is a bug of cmake

# The next three lines are needed while ECVL expects filenames starting in lowercase, when ECVL be updated this will be not necessary.

cd ${CONDA_PREFIX}/lib/cmake/eddl
cp EDDLConfig.cmake eddlConfig.cmake 
cp EDDLConfigVersion.cmake eddlConfigVersion.cmake


# Installing OpenCV

# Optional and not used
# git clone https://github.com/opencv/opencv.git
# cd opencv
# mkdir build
# cd build
# cmake ..
# make -j$(nproc)
# make install

conda install -c conda-forge opencv

# Optionally install this library used by ECVL
apt install libwrap0 libwrap0-dev


# Installing ECVL
cd 
git clone https://github.com/deephealthproject/ecvl.git
cd ecvl
mkdir build
cd build

#
# IMPORTANT: add the following line in file CMakeLists.txt of ECVL in line 280
#    include_directories("/root/anaconda3/envs/eddl/include")
#
Create the file ../cmake.sh with the following contents
########################################################
#!/bin/bash
cmake \
      -DECVL_BUILD_EXAMPLES=ON \
      -DECVL_BUILD_EDDL=ON \
      -DECVL_DATASET=ON \
      -DECVL_BUILD_GUI=OFF \
      -DECVL_WITH_OPENGL=ON \
      -DECVL_WITH_DICOM=ON \
      -DECVL_WITH_OPENSLIDE=OFF \
      -Deddl_DIR=${CONDA_PREFIX}/lib/cmake/eddl \
      -DCMAKE_INSTALL_PREFIX=install \
      ..
########################################################

../cmake.sh

make -j$(nproc)
make install


# Downloading and installing the "use_case_pipeline" example
cd
git  clone  https://github.com/deephealthproject/use_case_pipeline.git
cd use_case_pipeline

# Create a file  build_pipeline_2.sh  with the following contents:
##################### build_pipeline_2.sh ###############################
#!/bin/bash

UCP_PATH=$(pwd)
DEVICE="GPU"
BUILD_TYPE="Release"
# BUILD_TYPE="Debug"
DEPENDENCIES_DIR="deephealth_lin"
OPENCV_VERSION=4.3.0
PROC=$(($(nproc)-1))

EDDL_INSTALL_DIR=/root/anaconda3/envs/eddl/lib/cmake/eddl
OPENCV_INSTALL_DIR=/root/anaconda3/envs/eddl/lib/cmake/opencv4
ECVL_INSTALL_DIR=/root/ecvl/build/install

############ PIPELINE
cd $UCP_PATH
mkdir -p bin_lin && cd bin_lin
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -Decvl_DIR=${ECVL_INSTALL_DIR} ..
make -j$(nproc) && ./MNIST_BATCH
##################### build_pipeline_2.sh ###############################

bash build_pipeline_2.sh

# If MNIST_BATCH fails due to GPU then do the corresponding changes in the .cpp files of the pipeline, video-1 shows how to do it.
